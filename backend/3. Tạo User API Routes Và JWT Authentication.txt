_ Tạo folder models -> tạo file User.js :
	const mongoose = require('mongoose');
	const Schema = mongoose.Schema;

	// Tạo Schema
	const UserSchema = new Schema({
		name : { type : String, required : true },
		email : 	{ type : String, required : true },
		password : { type : String, required : true },
		avatar : { type : String, required : true },
		date : { type : Date, default: Date.now }
	});

	module.exports = User = mongoose.model('users', UserSchema);
	

_ Đăng ký và test bằng postman :
	_ Cài đặt module : gravatar quản lý ảnh
		const gravatar = require('gravatar');
	_ Cấu hình body parser :
		const bodyParser = require('body-parser');
		// apply bp middleware
		app.use(bodyParser.urlencoded({ extended : false }));
		app.use(bodyParser.json());
	_ Tại api users.js :
		const bodyParser = require('body-parser');
		const bcrypt = require('bcryptjs');
		const User = require('./../../models/User');
		router.post('/register', (req,res) => {
			User.findOne({ email : req.body.email }).then(user => {
				if(user){
					return res.status(400).json({ email : 'Email already exists!' });
				}else{
					const avatar = gravatar.url(req.body.email, {
						s : '200', // size
						r : 'pg', //Rating
						d : 'mm' // Default
					});

					const newUser = new User({
						name : req.body.name,
						email : req.body.email,				
						avatar : avatar, 
						password : req.body.password
					});

					bcrypt.genSalt(10, (err, salt) => { // Số lần băm
						bcrypt.hash(newUser.password, salt, (err, hash) => {
							if(err) throw err;
							newUser.password = hash;
							newUser.save().then(user => res.json(user)).catch(err => console.log(err));
						});
					});

				}
			})
		})

_ Login : trả về JWT
	
	router.post('login', (req,res) => {
		const email = req.body.email;
		const password = req.body.password;
		// Sử dụng mongo tìm user bằng email
		User.findOne({email}).then(user => {
			// Check user
			if(!user){ return res.status(404).json({email : 'User email not found'}) }
			// Check password
			bcrypt.compare(password, user.password)
				.then(isMatch => {  
					if(isMatch){ res.json({ msg : 'Success'}); } ====> Trả về token tại đây
					else return res.status(400).json({ password : 'Password incorrect' })
				})
		})
	})

_ Login : Trả về token 
	import vào => const jwt = require('jsonwebtoken');
	Kiểm tra biến isMatch : Tiến hành sign token 
		const payload = { is : user.id, name : user.name, avatar : user.avatar }; // Payload
		// Tại keys.js trong config tạo secretOrKey : 'secret'
		jwt.sign(payload, keys.secretOrKey, { expiresIn : 3600 }, (err, token) => { // 1 hour
			res.json({
				success : true,
				token : 'Bearer ' + token // là cách thức truyền token vào trong HTTP Header
			})
		}); 

_ Tiến hành xác thực sử dụng JWT : sử dụng module Passport
=> Sử dụng Passport JWT Authentication Strategy
	Tại server.js 
		kéo thư viện : const passport = require('passport');
		apply Passport middleware : app.use(passport.initialize());
		Cấu hình strategy ( kịch bản ) passport : require('./config/passport')(passport);
	Tạo file config/passport.js :
		const JwtStrategy = require('passport-jwt').Strategy;
		const ExtractJwt = require('passport-jwt').ExtractJwt;
		const mongoose = require('mongoose');
		const User = mongoose.model('users');
		const keys = require('./../config/keys');
		const opts = {};
		opts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
		opts.secretOrKey = key.secretOrKey;
		module.exports = passport => {
			passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
				console.log(jwt_payload); // Test demo router trước khi đi tiếp
				// Sử dụng mongoose method để truy xuất
				User.findById(jwt_payload.id)
					.then(user => {
						if(user){ return done(null, user); } // user này sẽ được đính vào request.
						return done(null, false);
					}).catch(err => console.log(err));
			}));
		}

	
	****
	Tại users.js router tạo api private ( bảo mật ) để lấy thông tin user đã login
	
	Khai báo passport : const passport = require('password');
	router.get('/current', passport.authenticate('jwt', { session: false }), (req, res) => {
		console.log(req.user);
		res.json({
			id : req.user.id,
			name : req.user.name,
			email : req.user.email
		});
	});



=> Demo truy cập router : /users/current
Lưu ý : truyền token lên headers
Authorization : Bearer MY_TOKEN











		